{"version":3,"sources":["Demos40.js","Card40.js","CardList40.js","SearchBox.js","App40.js","serviceWorker.js","index.js"],"names":["demos","img","link","demoName","date","Card","className","href","src","CardList","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchField","target","value","state","filterDemos","this","filter","demo","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAAaA,EAAQ,CACjB,CACEC,IAAI,eACJC,KAAK,yDACLC,SAAU,eACVC,KAAM,cAER,CACEH,IAAI,eACJC,KAAK,gCACLC,SAAU,cACVC,KAAM,cAER,CACEH,IAAI,eACJC,KAAK,iCACLC,SAAU,eACVC,KAAM,cAER,CACEH,IAAI,eACJC,KAAK,iCACLC,SAAU,eACVC,KAAM,cAER,CACEH,IAAI,eACJC,KAAK,gCACLC,SAAU,aACVC,KAAM,cAER,CACEH,IAAI,eACJC,KAAK,0BACLC,SAAU,OACVC,KAAM,cAER,CACEH,IAAI,eACJC,KAAK,+BACLC,SAAU,cACVC,KAAM,cAER,CACEH,IAAI,eACJC,KAAK,iCACLC,SAAU,eACVC,KAAM,cAER,CACEH,IAAI,eACJC,KAAK,8BACLC,SAAU,WACVC,KAAM,cAER,CACEH,IAAI,gBACJC,KAAK,iCACLC,SAAU,cACVC,KAAM,eC3CGC,EAdF,SAAC,GAA8B,IAA7BH,EAA4B,EAA5BA,KAAKD,EAAuB,EAAvBA,IAAIE,EAAmB,EAAnBA,SAASC,EAAU,EAAVA,KAE7B,OACI,yBAAKE,UAAU,QACX,uBAAGC,KAAI,UAAKL,GAAQI,UAAU,QAC1B,yBAAKA,UAAU,QACX,yBAAKE,IAAG,UAAKP,GAAOK,UAAU,UAC9B,wBAAIA,UAAU,YAAYH,GAC1B,uBAAGG,UAAU,QAAQF,OCY1BK,EAnBE,SAAC,GAAa,IAAZT,EAAW,EAAXA,MACf,OACI,6BAEIA,EAAMU,KAAI,SAACC,EAAKC,GACZ,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLX,IAAKU,EAAKV,IACVC,KAAMS,EAAKT,KACXC,SAAUQ,EAAKR,SACfC,KAAMO,EAAKP,YCHhBU,EATU,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACvB,OACQ,2BAAOT,UAAU,SACjBU,KAAK,SACLC,YAAY,kBACZC,SAAUH,KCwBPI,E,kDAxBX,aAAc,IAAD,8BACT,gBAMJC,eAAiB,SAAAC,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SANxC,EAAKC,MAAQ,CACT1B,MAAMA,EACNuB,YAAa,IAJR,E,qDAWJ,IAAD,OACEI,EAAcC,KAAKF,MAAM1B,MAAM6B,QAAO,SAAAC,GACxC,OAAOA,EAAK3B,SAAS4B,cAAcC,SAAS,EAAKN,MAAMH,YAAYQ,kBAEvE,OACI,yBAAKzB,UAAU,MACX,kBAAC,EAAD,CAAWS,aAAca,KAAKR,iBAC9B,kBAAC,EAAD,CAAUpB,MAAO2B,S,GAnBfM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACF,6BACE,kBAAC,EAAD,QAGAC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6a644fe8.chunk.js","sourcesContent":["export const demos = [\n    {\n      img:'./img/d1.png',\n      link:'https://donanana.github.io/1091-208410240-robofriends/',\n      demoName: 'RobotFriends',\n      date: '2020.10.14'\n    },\n    {\n      img:'./img/d2.png',\n      link:'./demos/SongFinder/index.html',\n      demoName: 'Song Finder',\n      date: '2020.06.20'\n    },\n    {\n      img:'./img/d3.png',\n      link:'./demos/MusicPlayer/index.html',\n      demoName: 'Music Player',\n      date: '2020.04.07'\n    },\n    {\n      img:'./img/d4.png',\n      link:'./demos/VideoPlayer/index.html',\n      demoName: 'Video Player',\n      date: '2020.03.07'\n    },\n    {\n      img:'./img/d5.png',\n      link:'./demos/Calculator/index.html',\n      demoName: 'Calculator',\n      date: '2020.04.25'\n    },\n    {\n      img:'./img/d6.png',\n      link:'./demos/Roma/index.html',\n      demoName: 'Roma',\n      date: '2020.04.05'\n    },\n    {\n      img:'./img/d7.png',\n      link:'./demos/TicTocToe/index.html',\n      demoName: 'Tic toc Toe',\n      date: '2020.05.06'\n    },\n    {\n      img:'./img/d8.png',\n      link:'./demos/MonsterGame/index.html',\n      demoName: 'Monster Game',\n      date: '2020.03.24'\n    },\n    {\n      img:'./img/d9.png',\n      link:'./demos/MiniShop/index.html',\n      demoName: 'MiniShop',\n      date: '2020.05.19'\n    },\n    {\n      img:'./img/d10.png',\n      link:'./demos/Meal Finder/index.html',\n      demoName: 'Meal Finder',\n      date: '2020.06.09'\n    },\n  ];","import React from 'react'\n\nconst Card = ({link,img,demoName,date}) => {\n\n    return (\n        <div className='demo'>\n            <a href={`${link}`} className=\"link\">\n                <div className=\"main\">\n                    <img src={`${img}`} className=\"image\"/>      \n                    <h2 className=\"demoName\">{demoName}</h2>\n                    <p className=\"date\">{date}</p>\n                </div>\n            </a>\n        </div>\n    )\n}\nexport default Card;","import React from 'react'\nimport Card from './Card40'\n\nconst CardList = ({demos}) => {\n    return(\n        <div>\n        {\n            demos.map((user,i) => {\n                return(\n                    <Card \n                    key={i}\n                    img={user.img}\n                    link={user.link}\n                    demoName={user.demoName}\n                    date={user.date}\n                    />\n                )\n            })\n        }\n      </div>\n    )\n}\nexport default CardList\n\n\n","import React from 'react'\n\nexport const SearchBox = ({searchChange}) => {\n    return (\n            <input className='search'\n            type=\"search\" \n            placeholder='   search demos'\n            onChange={searchChange}\n            />\n    )\n}\nexport default SearchBox","import React, { Component } from 'react'\nimport {demos} from './Demos40'\nimport CardList from './CardList40'\nimport SearchBox from './SearchBox'\n\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            demos:demos,\n            searchField: ''\n        }\n    }\n    onSearchChange = event => {\n        this.setState({searchField:event.target.value});\n    }\n    \n    render(){\n        const filterDemos = this.state.demos.filter(demo =>{\n            return demo.demoName.toLowerCase().includes(this.state.searchField.toLowerCase());\n        });\n        return (\n            <div className='tc'>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <CardList demos={filterDemos}/>\n            </div>\n        )\n    }\n}\n\nexport default App\n// rafc","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App40';\nimport CardList from './CardList40';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n<div>\n  <App />\n</div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}